=> To show all collections stored in a database
    -> show collections

=>Print all the documents of a collection
    -> db.collection_name.find()

=>Create a new Database
    -> use db_name
    -> use command create a new database if there is no database exist with the same name

=> Add a new collections
    -> db.createCollection("collection_name")
    -> Make sure we execute this command after 'use db' command.

=> Add a new record in collection
    -> db.collection_name.insertOne({prop1: "value1", prop2: "value2", ...})

=> Add multiple record in a collection
    -> db.collection_name.insertMany({prop1: "value1", prop2: "value2", ...}, {prop1: "value1", prop2: "value2", ...}, {prop1: "value1", prop2: "value2", ...}, ...)

=> Count of the documents in a collection
    -> db.collection_name.find().count()

=> Get certain amount of data
    -> we can use 'limit' function
    -> db.collection_name.find().limit(number)

=> Set an offeset while quering data
    -> we can set an offset useing 'skip()' function
    -> db.collection_name.find().skip(number)
    -> db.collection_name.find().skip(number).limit(number)

=> Filetr records based on a condition
    -> To filter records, we can pass an object as an arguments in the 'find()' funtion, where we can add our conditions
    -> db.collection_name.find({condition_key: 'condition_value'})
    -> db.collection_name.find({'condition_key.nested_key': 'condition_value'})
    ->

=> Get specific key-value pair from collection
    ->If we not want all the property of collection, instead get some specific property(key-value), this process is called projection.
    -> db.collection_name.find({filteration_criteria}, {key1: true, key2: true, ...})
    -> You can also pass the first argument as empty object
    -> db.collection_name.find({}, {key1: true, key2: true, ...})

=> Exclude specific key-value pair from collection
    -> db.collection_name.find({}, {key1: false, key2: false, ...})

=> Delete documents form collections
    -> To delete documents we can use functions like 'deleteOne()', 'deleteMany()' and 'findByIdAndDelete()'
    -> db.collection_name.deleteOne({key: value})
    -> db.collection_name.deleteMany({key: value})
    -> db.collection_name.findOneAndDelete({key: value}) -> It will return the deleted object

=> Update a documents in a colllection
    -> To Update documents in a collection we can use updateOne(), updateMany() like functions.
    -> db.collection_name.updateOne({filterration}, {$opeartor: {key1: value1, ...}})
    -> MongoDB provide us some opearot for updation, for ex, 
    -> $set: This will allocate the value directly to the key
    -> $inc: This will increment the value
    -> To decrease we can increase value with nagative (-ve)
    -> if you will use 'updateMany()' then all the record that are match to the filteration criterial will update.

=> Get distinct value of a perticular Key
    -> We can use "distinct()" function in order to get all distinct value.

=> Analysing Query
    -> We can analysing pur query using 'explain()' function. In this function we can pass an argument 'executionStats' and it will provide information.
    -> db.collection_name.find().explain('executionStats')